proving correctness heuristically optimized code a system proving programs written high level language correctly translated low level language a primary system post optimization step code generation the low level language programs need generated compiler fact hand coded examples usefulness system some interesting results ability handle programs implement recursion bypassing start program detection pinpointing wide class errors low level language programs the examples demonstrate optimization genre paper result substantially faster operation saving memory terms program stack sizes cacm july 1978 samet h compilers correctness code optimization debugging program verification lisp 4.12 4.21 4.22 5.24 ca780708 dh february 7 1979 3:53 pm