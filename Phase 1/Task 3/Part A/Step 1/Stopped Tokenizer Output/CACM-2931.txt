logic programming languages logic long terested answers questions computable principle outcome puts bounds possibilities formalization more recently precise comparisons efficiency decision methods developments complexity theory these applications logic big question methods logic significance direction applied parts computability theory programming languages offer obvious opportunity syntactic formalization advanced semantical theory complete though examples give wide ranging mathematical answers queries what machine what computable process how machine simulate process programs naturally enter giving descriptions processes the definition precise meaning program requires explain objects computation statics problem transformed dynamics so theories automata nets teresting dynamics formalized portion field concentration finite state algebraic aspects it understanding higher level program features involves infinite objects forces pass levels explanation conceptual ideas final simulation real machine these levels made mathematically exact find abstractions represent structures the experience independent workers method data types lattices partial orderings information content ordering continuous mappings demonstrated flexibility approach providing definitions proofs clean undue dependence implementations nevertheless remains showing abstract conceptualizations actualized say unified theory cacm september 1977 scott d s logic programming languages automata denotational semantics calculus models computability partial functions approximation function spaces 1.2 4.20 5.21 5.24 5.27 ca770902 jb december 28 1977 6:49 am